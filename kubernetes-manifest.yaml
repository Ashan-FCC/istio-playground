apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: backend
  labels:
    app: backend
    auth: enabled
spec:
  selector:
    matchLabels:
      app: backend
      auth: enabled
  replicas: 1
  template:
    metadata:
      labels:
        app: backend
        auth: enabled
    spec:
      containers:
        - name: backend
          image: ashanperera/backend:1.2.1
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          env:
            - name: GET_HOSTS_FROM
              value: dns
              # If your cluster config does not include a dns service, then to
              # instead access environment variables to find service host
              # info, comment out the 'value: dns' line above, and uncomment the
              # line below:
              # value: env
          ports:
            - containerPort: 4000
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  labels:
    app: backend
    auth: enabled
spec:
  # comment or delete the following line if you want to use a LoadBalancer
  type: NodePort
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  # type: LoadBalancer
  ports:
    - port: 4000
      name: http-backend
  selector:
    app: backend
---
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: auth-verify
spec:
  selector:
    matchLabels:
      app: auth-verify
  replicas: 1
  template:
    metadata:
      labels:
        app: auth-verify
    spec:
      containers:
        - name: auth-verify
          image: ashanperera/auth-verify:1.3.1
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          env:
            - name: GET_HOSTS_FROM
              value: dns
              # If your cluster config does not include a dns service, then to
              # instead access environment variables to find service host
              # info, comment out the 'value: dns' line above, and uncomment the
              # line below:
              # value: env
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: auth-verify
  labels:
    app: auth-verify
spec:
  # comment or delete the following line if you want to use a LoadBalancer
  type: NodePort
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  # type: LoadBalancer
  ports:
    - port: 3000
      name: http-auth-verify
  selector:
    app: auth-verify
---
